/*! vuzonp-virtual-keyboard v0.1.0 | (c) 2015, Thomas Girard | http://opensource.org/licenses/MIT */

!function() {
    var a = (new KeymapHandler({
        backquote: 192,
        backslash: 220,
        backspace: 0,
        bracketLeft: 219,
        bracketRight: 221,
        comma: 188,
        digit0: 48,
        digit1: 49,
        digit2: 50,
        digit3: 51,
        digit4: 52,
        digit5: 53,
        digit6: 54,
        digit7: 55,
        digit8: 56,
        digit9: 57,
        equal: 187,
        intlBackslash: 49,
        intlHash: 0,
        intlRo: 193,
        intlYen: 255,
        keyA: 65,
        keyB: 66,
        keyC: 67,
        keyD: 68,
        keyE: 69,
        keyF: 70,
        keyG: 71,
        keyH: 72,
        keyI: 73,
        keyJ: 74,
        keyK: 75,
        keyL: 76,
        keyM: 77,
        keyN: 78,
        keyO: 79,
        keyP: 80,
        keyQ: 81,
        keyR: 82,
        keyS: 83,
        keyT: 84,
        keyU: 85,
        keyV: 86,
        keyW: 87,
        keyX: 88,
        keyY: 89,
        keyZ: 90,
        minus: 189,
        period: 190,
        quote: 192,
        semicolon: 186,
        slash: 191,
        altLeft: 18,
        altRight: 18,
        capsLock: 20,
        contextMenu: 93,
        controlLeft: 17,
        controlRight: 17,
        enter: 13,
        oSLeft: 91,
        oSRight: 92,
        shiftLeft: 16,
        shiftRight: 16,
        space: 32,
        tab: 9,
        "delete": 46,
        end: 35,
        help: -1,
        home: 36,
        insert: 45,
        pageDown: 34,
        pageUp: 33,
        arrowDown: 40,
        arrowLeft: 37,
        arrowRight: 39,
        arrowUp: 38,
        escape: 24,
        f1: 112,
        f2: 113,
        f3: 114,
        f4: 115,
        f5: 116,
        f6: 117,
        f7: 118,
        f8: 119,
        f9: 120,
        f10: 121,
        f11: 122,
        f12: 123,
        fn: 0,
        printScreen: 44,
        scrollLock: 145,
        pause: 19
    }), function(a) {
        this.defineKeymap(a);
    });
    a.prototype.ev = void 0, a.prototype.keyList = {}, a.prototype.currentKey = void 0, 
    a.prototype.oldKey = void 0, a.prototype.defineKeymap = function(a) {
        var c;
        for (c in a) this.keyList[a[c]] = new b(c, a[c]);
    }, a.prototype.addKey = function(a, c) {
        var d = new b(a, c);
        return this.keyList[c] = d, this;
    }, a.prototype.keyExists = function(a) {
        return this.keyList[a] && this.keyList[a] instanceof b;
    }, a.prototype.getKey = function(a) {
        return this.keyList[a];
    }, a.prototype.notify = function(a) {
        this.ev = a, this.currentKey && (this.oldKey = this.currentKey.off());
        var b = this.ev.which;
        this.keyExists(b) && (this.currentKey = this.getKey(b).on());
    };
    var b = function(a, b) {
        isNaN(b) ? console.log("Invalid keyCode value (NaN)") : this.code = parseInt(b), 
        this.elem = document.getElementById(a);
    };
    b.prototype.code = -1, b.prototype.elem = void 0, b.prototype.charList = void 0, 
    b.prototype.on = function() {
        return VKB_DEBUG && console.log("[KeyHandler] switch on: " + this.code), this.elem.classList.add("on"), 
        this;
    }, b.prototype.off = function() {
        return VKB_DEBUG && console.log("[KeyHandler] turn off: " + this.code), this.elem.classList.remove("on"), 
        this;
    }, b.prototype.setCharacters = function(a) {
        return this.charList = a.map(function(a) {
            return isNaN(a) ? a.charCodeAt(0) : a;
        }), this;
    }, b.prototype.getChar = function() {
        return this.charList[0];
    }, b.prototype.getShiftChar = function() {
        return this.charList[1];
    }, b.prototype.getAltChar = function() {
        return this.charList[2];
    }, b.prototype.getShiftAltChar = function() {
        return this.charList[3];
    };
}();
//# sourceMappingURL=keyboard.js.map
